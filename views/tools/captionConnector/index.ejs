<!DOCTYPE html>
<html lang="ja">
	<head>
		<%- include('../../parts/head', {title: '字幕コネクター'}) %>
		<meta property="og:site_name" content="字幕コネクター"/>
		<meta property="og:url" content="<%= rootURL %>"/>
		<meta property="og:title" content="字幕コネクター"/>
		<meta property="og:type" content="Website" />
		<meta property="og:description" content=""/>

		<script type="text/javascript" src="/javascripts/functions.js"></script>

		<style>
			
		</style>
	</head>
	<body>
		<div class="container p-2">
			<div class="mb-3">
				<a href="/">トップに戻る</a>
			</div>

			<h1>字幕コネクター</h1>

			<div class="mb-3">
				音声認識結果をZoomの字幕として送信します。
			</div>

			<div class="row mb-3">
				<div class="col-sm">
					<select class="form-select" id="devices" name="devices" aria-label="入力デバイス">
					</select>
				</div>
			</div>
			<div class="row mb-3">
				<div class="col-auto">
					<button class="btn btn-outline-primary" type="button" id="startRecordingButton">開始</button>
				</div>
				<div class="col-auto">
					<button class="btn btn-outline-primary" type="button" id="stopRecordingButton">終了</button>
				</div>
				<div class="col-auto">
					<button class="btn btn-outline-primary" type="button" id="saveRecordingButton">保存</button>
				</div>
			</div>
			<div class="row mb-3">
				<div class="col-auto">
					<div id="mediaRecorderError"></div>
				</div>
			</div>
		</div>

		<script>
			let mediaRecorder = null ;
			let chunks = [] ;

			$(async function() {
				$("#startRecordingButton").prop("disabled", true);
				$("#stopRecordingButton").prop("disabled", true);

				let devices = await getCurrentDevices() ;

				devices.forEach(function(device) {
					if (device.kind == "audioinput") {
						$("#devices").append('<option value="' + device.deviceId + '">' + device.label + '</option>') ;
					}
				}) ;

				let deviceId = $('[name=devices]').val();

				await initDevice(deviceId) ;

				$('[name=devices]').on("change", async () => {
					let deviceId = $('[name=devices]').val();
					//let label = $('[name=devices] option:selected').text();
					await initDevice(deviceId) ;
				}) ;

				$('#startRecordingButton').on('click', (e) => {
					if (mediaRecorder.state == "inactive") {
						chunks = [] ;
						mediaRecorder.start(1000) ;
					}
				}) ;

				$('#stopRecordingButton').on('click', (e) => {
					if (mediaRecorder.state != "inactive") {
						mediaRecorder.stop() ;
					}
				}) ;

				$('#saveRecordingButton').on('click', async (e) => {
					let blob = new Blob(chunks);

					//let arrayBuffer = await blob.arrayBuffer();
					//let audioContext = new AudioContext();

					//audioContext.sampleRate = 16000 ;

					//let audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

					//console.log(audioBuffer);

					saveBlob(blob, 'test') ;
				}) ;
			}) ;

			async function initDevice(deviceId) {
				$("#startRecordingButton").prop("disabled", true);
				$("#stopRecordingButton").prop("disabled", true);

				let stream = await navigator.mediaDevices.getUserMedia ({audio: { deviceId: deviceId }});
				
				if (mediaRecorder != null) {
					if (mediaRecorder.state != "inactive") {
						mediaRecorder.stop() ;
					}
				}

				mediaRecorder = new MediaRecorder(stream);

				mediaRecorder.onstart = function(event) {
					console.log('onstart') ;
					$('#mediaRecorderError').text('録音中...') ;
				} ;

				mediaRecorder.onstop = function(event) {
					console.log('onstop') ;
					$('#mediaRecorderError').text('') ;
				} ;

				mediaRecorder.onpause = function(event) {
					console.log('onpause') ;
				} ;

				mediaRecorder.onresume = function(event) {
					console.log('onresume') ;
				} ;

				mediaRecorder.ondataavailable = async function(e) {
					console.log('ondataavailable') ;
    				//chunks.push(e.data);

					console.log(e.data) ;
					
					let buffer = await e.data.arrayBuffer();
					const view = new Int8Array(buffer);
					//console.log(view) ;

					chunks.push(e.data) ;
  				}

				mediaRecorder.onerror = function(e) {
					let error = e.error;

					switch(error.name) {
					case InvalidStateError:
						break;
					case SecurityError:
						break;
					case NotSupportedError:
						break;
					case UnknownError:
						break;
					default:
						break;
					}

					console.log(error.name) ;
					$('#mediaRecorderError').text(error.name) ;
				};

				console.log(mediaRecorder) ;

				$("#startRecordingButton").prop("disabled", false);
				$("#stopRecordingButton").prop("disabled", false);
			}

			// Get current device array.
			async function getCurrentDevices() {
				let devices = [] ;

				if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
					let stream = await navigator.mediaDevices.getUserMedia({audio: true}) ;

					if (stream != null) {
						devices = await navigator.mediaDevices.enumerateDevices() ;
					}
				}
				
				return devices ;
			}

			function saveBlob(blob, fileName) { 
				if(window.navigator.msSaveBlob) {
					window.navigator.msSaveBlob(blob, fileName);
				} else {
					var a = document.createElement("a");
					a.href = URL.createObjectURL(blob);
					a.target = '_blank';
					a.download = fileName;
					a.click();
				}
			}
		</script>

	</body>
</html>
