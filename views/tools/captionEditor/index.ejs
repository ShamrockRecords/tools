<!DOCTYPE html>
<html lang="ja">
	<head>
		<%- include('../../parts/head', {title: appTitle}) %>
		<meta property="og:site_name" content="<%= appTitle %>"/>
		<meta property="og:url" content="<%= rootURL %>"/>
		<meta property="og:title" content="<%= appTitle %>"/>
		<meta property="og:type" content="Website" />
		<meta property="og:description" content=""/>

		<script type="text/javascript" src="/javascripts/shortcut.js"></script>
		<script type="text/javascript" src="/javascripts/functions.js"></script>
		<script type="text/javascript" src="/javascripts/speech_recognition.js"></script>
		<script type="text/javascript" src="/javascripts/video_control.js"></script>
		
		<script type="text/javascript" src="/javascripts/ffmpeg.min.js"></script>

		<script type="text/javascript" src="/javascripts/generate_srt_data.js"></script>

		<script defer src="https://use.fontawesome.com/releases/v5.15.4/js/all.js" integrity="sha384-rOA1PnstxnOBLzCLMcre8ybwbTmemjzdNlILg8O7z1lUkLXozs4DHonlDtnE7fpc" crossorigin="anonymous"></script>
		
		<style>
			html,
			body
			{
				height: 100%;
				background-color:ghostwhite;
			}

			.box {
				height: 500px;
				overflow:hidden;	
				overflow-y:scroll;
				padding:10px;
				border-color: darkgrey;
				border-radius: 5px;
			}

			textarea {
				border-color: darkgrey;
				border-radius: 5px;
			}

			.time {
				font-family:monospace;
			}

			.cmn-btn {
				width: 120px;
			}

			.op-btn {
				width: 80px;
			}

			.wide-btn {
				width: 200px;
			}

			.wider-btn {
				width: 300px;
			}

			.mid-btn {
				width: 100px;
			}

			#acpProfileWords {
				height: 200px;
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="row my-3">
				<div class="col-auto">
					<a href="/"><%- __("トップに戻る") %></a>
				</div>
				<div class="col-auto">
					<% if (mediaType == "youtube") { %>
						<a href="/jimakueditor4file"><%- __("字幕エディター for ファイルへ") %></a>
					<% } else if (mediaType == "file") { %>
						<a href="/jimakueditor"><%- __("字幕エディター for YouTubeへ") %></a>
					<% } %>
				</div>
				<div class="col-auto">
					<div class="dropdown text-right">
						<a class="dropdown-toggle" href="#" id="dropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
							<%- __("言語選択") %>
						</a>
						<ul class="dropdown-menu" aria-labelledby="dropdown">
							<li><a class="dropdown-item" href="/locale_change/ja"><%- __("日本語") %></a></li>
							<li><a class="dropdown-item" href="/locale_change/en"><%- __("英語") %></a></li>
							<!--<li><a class="dropdown-item" href="/locale_change/zh-TW"><%- __("繁体字") %></a></li>-->
							<!--<li><a class="dropdown-item" href="/locale_change/zh-CN"><%- __("簡体字") %></a></li>-->
						</ul>
					</div>
				</div>
			</div>

			<div class="row mb-3">
				<div class="col">
					<h3><%= appTitle %></h3>
				</div>	
			</div>

			<div class="row mb-3">
				<div class="col">
					<%- include('howToUse', {}) %>
				</div>	
			</div>

			<div class="row mb-3">
				<div class="col">
					<%- include('translation', {}) %>
				</div>
			</div>

			<div class="row mb-3">
				<div class="col">
					<%- include('convertBlocks', {}) %>
				</div>
			</div>

			<div class="row mb-3">
				<div class="col">
					<%- include('shortcut', {}) %>
				</div>	
			</div>

			<hr />

			<div class="row mb-3">	
				<div class="col-md mb-3">	
					<div class="row">
						<div class="col">
							<%- include('videoControl', {}) %>
						</div>
					</div>

					<div class="row">
						<div class="col">
							<%- include('settings', {}) %>
						</div>
					</div>
					
				<% if (mediaType == "file") { %>
					<div class="row">
						<div class="col">
							<%- include('speechRecognition', {}) %>
						</div>
					</div>
				<% } %>
				</div>

				<div class="col-md mb-3">
					<div class="row mb-3">
						<div class="col" >											
							<input class="btn btn-primary btn-sm" id="quickSaveAppDataButton" type="button" value="<%- __("今すぐデータを保存") %>" name="quickSaveAppDataButton" />
						</div>
					</div>

					<div class="row mb-3">
						<div class="col">
							<div class="box border" id="scroller">
								<table class="table" id="subtitles">

								</table>
							</div>
						</div>
					</div>

					<div class="row mb-3">
						<div class="col">
							<%- include('findAndReplace', {}) %>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="row mb-3">	
			<div class="col">
				<div class="mb-3 small" style="text-align: center;">Copyright © <a href="https://udtalk.jp"><%- __("UDトーク") %></a>. All Rights Reserved.</div>
			</div>
		</div>

		<script>
			let ytPlayer = null ;
			let localPlayer = null ;
			let lines = [] ;
			let details = [] ;
			let mediafile = null ;
			let appDataProperties = {} ;

			$(async function () {
				restoreSettings() ;

				updatePublicDictionaryComboBox() ;

				function eventListener(e) {
					storeSettings()

					let grammarFileNamesLabel = $("#acpGrammarFileNameSelect option:selected").text() ;
					$("#acpGrammarFileNamesLabel").text(grammarFileNamesLabel) ;

					let publicDictionaryLabel1 = $("#publicDictionariesSelect1 option:selected").text() ;
					$('#publicDictionaryLabel1').text(publicDictionaryLabel1) ;

					let publicDictionaryLabel2 = $("#publicDictionariesSelect2 option:selected").text() ;
					$('#publicDictionaryLabel2').text(publicDictionaryLabel2) ;

					appDataProperties["language"] = $("#fromLanguageSelect").val() ;
				} ;

				$("#autoStopWhenEdtingStarted").on('change', eventListener) ;
				$("#autoPlayWhenEdtingFinished").on('change', eventListener) ;
				$("#seekingSeconds").on('change', eventListener) ;
				$("#playbackSeconds").on('change', eventListener) ;
				$("#saveAppKey").on('change', eventListener) ;
				$("#acpGrammarFileNameSelect").on('change', eventListener) ;
				$("#publicDictionariesSelect1").on('change', eventListener) ;
				$("#publicDictionariesSelect2").on('change', eventListener) ;
				$("#acpProfileWords").on('change', eventListener) ;
				$("#acpWordDataFileName").on('change', eventListener) ;
				$("#acpAppKey").on('input', eventListener) ;
				$("#acpLoggingOptOut").on('change', eventListener) ;
				$("#ignoreReplyToken").on('change', eventListener) ;
				$("#acpDiarization").on('change', eventListener) ;
				$("#replacingDots").on('change', eventListener) ;
				$("#showPreviewAlways").on('change', eventListener) ;
				$("#acpDiarizationCount").on('change', eventListener) ;
				
				$("#fromLanguageSelect").on('change', eventListener) ;
				
				$("#accessToken").on('change', (e) => {
					storeSettings() ;

					updatePublicDictionaryComboBox() ;
				}) ;

				let grammarFileNamesLabel = $("#acpGrammarFileNameSelect option:selected").text() ;
				$("#acpGrammarFileNamesLabel").text(grammarFileNamesLabel) ;

				var tag = document.createElement('script');
				tag.src = "https://www.youtube.com/iframe_api";
				var firstScriptTag = document.getElementsByTagName('script')[0];
				firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
				
				$(window).on('beforeunload', function(e) {
					e.preventDefault();

					if (lines != null || lines.length != 0) {
    					e.returnValue = 'Check';
					}

					return "" ;
				});

				let result = await getTranslationLanguages("ja") ;
				let languages = result.data.languages ;

				$("#fromLanguageSelect").empty() ;
				$("#toLanguageSelect").empty() ;

				for (let key in languages) {
					let language = languages[key] ;

					$("#fromLanguageSelect").append($("<option></option>").attr("value", language.language).text(language.name));
					$("#toLanguageSelect").append($("<option></option>").attr("value", language.language).text(language.name));
				}
				
				$("#fromLanguageSelect").val("ja") ;

				$(window).keydown(function(e){
					if (e.originalEvent.code == "F1" ||
						e.originalEvent.code == "F2" ||
						e.originalEvent.code == "F3" ||
						e.originalEvent.code == "F4" ||
						e.originalEvent.code == "F5" ||
						e.originalEvent.code == "F6") {
						return false ;
					}
				}) ;

				$("#replaceAllButton").on("click", (e) => {
					if (!window.confirm("全て置換しますがよろしいですか？この操作は元に戻せないので事前にデータを保存しておくことをお勧めします。")) {
						return ;
					}

					let searchWord = $("#searchWord").val() ;
					let replaceWord = $("#replaceWord").val() ;

					for (let i=0; i<lines.length; i++) {
						let textClassName = "#text" + Number(i) ;

						let text = $(textClassName).val() ;

						text = text.replaceAll(searchWord, replaceWord) ;

						$(textClassName).val(text) ;
					}
				}) ;

				$("#videoLoadButton").on("click", (e) => {
					if (localPlayer != null) {
						localPlayer.src = null ;
						localPlayer = null ;
						mediafile = null ;
						$("#localVideoPreview").css("display", "none") ;	
					}

					$("#mediaFile").val("") ;

					let videoURL = $("#videoURL").val() ;	
					
					loadOnlineVideo(videoURL) ;
				}) ;

				$("#mediaFile").on('change', (e) => {
					if (ytPlayer != null) {
						ytPlayer.destroy() ;
						ytPlayer = null ;
						$("#onlineVideoPreview").css("display", "none") ;	
					}

					$("#videoURL").val("") ;

					mediafile = e.target.files[0]

					loadLocalVideo(mediafile) ;
				}) ;

				$("#loadSubtitleButton").on("click", (e) => {
					if (lines.length != 0) {
						if (window.confirm("現在読み込んでいる内容を上書きします。よろしいですか？")) {
							$("#subtitleFile").click() ;
						}
					} else {
						$("#subtitleFile").click() ;
					}
				}) ;

				$("#subtitleFile").on('change', (e) => {
					let fileList = $('#subtitleFile').get(0).files;
					let result = fileList[0];

					let reader = new FileReader() ;
					let fileName = result.name.split('.')[0] + ".csv" ;

					reader.readAsText(result) ;

					reader.addEventListener('load', function() {
						let content = reader.result ;
						
						let srtElements = loadSrtFile(content) ;

						if (srtElements.length != 0) {
							// SRT File
							lines = [] ;
							details = [] ;
							appDataProperties = {} ;

							for (let key in srtElements) {
								let srt = srtElements[key] ;

								let line = [] ;

								line.push(srt.time.start) ;
								line.push(srt.time.end) ;
								line.push(srt.text.replaceAll("\r\n", "\n").replaceAll("\n", "")) ;

								lines.push(line) ;
								details.push({}) ;
							}

							appDataProperties["converted"] = true ; 
						} else {
							// CSV File
							lines = convertToArray(content) ;

							details = [] ;
							appDataProperties = {} ;

							let isFirstLine = true ;

							let relativeStartTime = 0 ;

							for (let i=0; i<lines.length; i++) {
								let line = lines[i] ;
								let nextLine = []
								
								if (i < lines.length - 1) {
									nextLine = lines[i+1] ;
								}

								line[0] = ParseToDate(line[0]) / 1000 ;

								if (line[1] == "") {
									if (nextLine.length != 0) {
										line[1] = ParseToDate(nextLine[0]) / 1000 ;
									} else {
										line[1] = line[0] + 1 ;
									}
								} else {
									line[1] = ParseToDate(line[1]) / 1000 ;
								}

								if (isFirstLine) {
									relativeStartTime = line[0] ;
									isFirstLine = false ;
								}
						
								line[0] -= relativeStartTime ;
								line[1] -= relativeStartTime ;

								details.push({}) ;
							}
						}

						appDataProperties["language"] = "ja" ;

						$("#fromLanguageSelect").val(appDataProperties["language"]) ;

						updateSubtitleData() ;
					}) ;

					$("#subtitleFile").val("") ;
				})

				$("#jumpToSubtitleButton").on("click", (e) => {
					jumpToSubtitle() ;
				}) ;
				
				$("#jumpToLastEditedButton").on("click", (e) => {
					
					commitAppData() ;

					for (let i=details.length; i>0; i--) {
						let detail = details[i-1] ;

						if (detail["edited"] != undefined && detail["edited"]) {
							$("#text" + (i-1))[0].scrollIntoView(true) ;

							let offsetTime = Number($("#offsetTimeLength").val()) ;

							let line = lines[(i-1)] ;
							let startTime = line[0] + offsetTime ;

							updatePlayingTime(startTime) ;

							seekToVideo(startTime, false) ;

							break ;
						}
					}
				}) ;

				$("#speechRecognitionButton").on("click", async (e) => {
				
				/*
					"現在音声認識の処理中です。処理が終わるまでお待ちください。"
					"既に編集対象の認識結果があります。上書きされますが宜しいですか？"
					"音声認識設定でAPPKEYを入力してください。"
					"ファイルを変換中..."
					"ファイルを変換中... "
					"音声認識を開始することができませんでした。"
					"処理を待っています..."
					"処理を開始しました..."
					"結果を取得しています..."
					"経過"
				*/
				
					// Speech Recognition by AmiVoice Cloud Platform
					await runSpeechRecognition((message, language) => {
					
						if (message != "") {
							alert(message) ;
						}
						
						appDataProperties["language"] = language ;

						$("#fromLanguageSelect").val(appDataProperties["language"]) ;

						$("#speechRecognitionButton").html("<%- __('音声認識結果を取得') %>") ;
					}) ;
				}) ;

				$("#offsetTimeLengthUpdateButton").on("click", (e) => {
					updateSubtitleData() ;
				}) ;

				// Export
				$("#saveAsCsvButton").on("click", (e) => {
					let offsetTime = Number($("#offsetTimeLength").val()) ;
					let content = "00:00:00,00:00:00,\r\n" ;

					for (let key in lines) {
						let line = lines[key] ;
						
						if (line[0] + offsetTime < 0) {
							continue ;
						}

						let textClassName = "#text" + Number(key) ;

						line[2] = $(textClassName).val() ;

						if (line[2] == "") {
							continue ;
						}

						let startTime = secToTime(line[0] + offsetTime, ".") ;
						let endTime = secToTime(line[1] + offsetTime, ".") ;
						
						content += startTime + "," + endTime ;
						
						for (let i=2; i<line.length; i++) {
							content += ",\"" + line[i] + "\"" ;
						}

						content += "\r\n" ;
					}

					let fileName = $("#appDataFileName").val() ;

					fileName = fileName.replaceAll(".captionEditor", "") ;
					fileName = fileName.replaceAll(".jimakuEditor", "") ;
					fileName += ".csv" ;

					saveAsFile(content , fileName) ;
				}) ;

				$("#saveAsTextButton").on("click", (e) => {
					let content = "" ;

					for (let key in lines) {
						let line = lines[key] ;
						
						let textClassName = "#text" + Number(key) ;

						line[2] = $(textClassName).val() ;

						if (line[2] == "") {
							continue ;
						}
						
						content += line[2] ;

						if (content.endsWith("。")) {
							content += "\r\n" ;
						}
					}

					let fileName = $("#appDataFileName").val() ;

					fileName = fileName.replaceAll(".captionEditor", "") ;
					fileName = fileName.replaceAll(".jimakuEditor", "") ;
					fileName += ".txt" ;
					
					saveAsFile(content, fileName) ;
				}) ;

				let isExportingSrt = false ;

				$("#saveAsSrtButton").on("click", async (e) => {
					if (isExportingSrt) {
						return ;
					}

					isExportingSrt = true ;

					let spinner = '<div class="d-flex justify-content-center"><div class="spinner-border text-secondary my-3" role="status"><span class="visually-hidden">Loading...</span></div></div>' ;
				
					$("#toExportSrtSpinner").empty() ;
					$("#toExportSrtSpinner").append(spinner) ;

					let offsetTime = Number($("#offsetTimeLength").val()) ;
					let copiedLines = [] ;

					for (let key in lines) {
						let line = lines[key] ;
						
						if (line[0] + offsetTime < 0) {
							continue ;
						}

						let textClassName = "#text" + Number(key) ;

						line[2] = $(textClassName).val() ;

						if (line[2] == "") {
							continue ;
						}

						let startTime = line[0] + offsetTime ;
						let endTime = line[1] + offsetTime ;

						let element = {} ;

						element["startTime"] = startTime ;
						element["endTime"] = endTime ;
						element["content"] = line[2] ;
						element["translation"] = line[3] ;

						copiedLines.push(element) ;
					}

					let content = await generateSrtData(copiedLines, true, appDataProperties["language"]) ;

					let fileName = $("#appDataFileName").val() ;

					fileName = fileName.replaceAll(".captionEditor", "") ;
					fileName = fileName.replaceAll(".jimakuEditor", "") ;

					if (appDataProperties["language"] == "ja") {
						fileName += ".ja_JP.srt" ;
					} else {
						fileName += "." + appDataProperties["language"] + ".srt" ;
					}

					$("#toExportSrtSpinner").empty() ;

					saveAsFile(content, fileName) ;

					isExportingSrt = false ;
				}) ;

				$("#convertToSrtButton").on("click", async (e) => {
					if (isExportingSrt) {
						return ;
					}

					if (appDataProperties["converted"] == true) {
						alert("このデータは既にハコ割りをしています。") ;
						return ;
					}

					if (window.confirm("ハコ割りをすると元に戻せません。現在の作業中のデータを一度保存してからこの処理を行うことをお勧めします。続行しますか？") == false) {
						return ;
					}

					isExportingSrt = true ;

					let spinner = '<div class="d-flex justify-content-center"><div class="spinner-border text-secondary my-3" role="status"><span class="visually-hidden">Loading...</span></div></div>' ;
				
					$("#toExportSrtSpinner").empty() ;
					$("#toExportSrtSpinner").append(spinner) ;

					let offsetTime = Number($("#offsetTimeLength").val()) ;
					let copiedLines = [] ;

					for (let key in lines) {
						let line = lines[key] ;
						
						if (line[0] + offsetTime < 0) {
							continue ;
						}

						let textClassName = "#text" + Number(key) ;

						line[2] = $(textClassName).val() ;

						if (line[2] == "") {
							continue ;
						}

						let startTime = line[0] + offsetTime ;
						let endTime = line[1] + offsetTime ;

						if (startTime == endTime) {
							continue ;
						}

						let element = {} ;

						element["startTime"] = startTime ;
						element["endTime"] = endTime ;
						element["content"] = line[2] ;
						element["translation"] = line[3] ;

						copiedLines.push(element) ;
					}

					let content = await convertSrtData(copiedLines, false, appDataProperties["language"]) ;
					
					$("#toExportSrtSpinner").empty() ;
					
					isExportingSrt = false ;

					lines = convertToArray(content) ;

					details = [] ;

					for (let key in lines) {
						let line = lines[key] ;

						line[0] = Number(line[0]) ;
						line[1] = Number(line[1]) ;

						details.push({}) ;
					}

					$("#offsetTimeLength").val("0") ;

					appDataProperties["converted"] = true ;

					updateSubtitleData() ;
				}) ;

				$("#saveAsSrtDataButton").on("click", async (e) => {

					if (appDataProperties["converted"] != true) {
						alert("この機能はハコ割りをした後に使用できます。") ;
						return ;
					}

					let srtData = "" ;
					let replacingDots = $('#replacingDots').prop("checked") ;

					let offsetTime = Number($("#offsetTimeLength").val()) ;
					let num = 1 ;

					for (let key in lines) {
						let line = lines[key] ;
						
						if (line[0] + offsetTime < 0) {
							continue ;
						}

						let textClassName = "#text" + Number(key) ;

						line[2] = $(textClassName).val() ;

						if (line[2] == "") {
							continue ;
						}

						let startTime = line[0] + offsetTime ;
						let endTime = line[1] + offsetTime ;

						if (startTime == endTime) {
							continue ;
						}
						
						let text = line[2] ;

						if (replacingDots) {
							text = text.replaceAll("、", " ") ;
							text = text.replaceAll("、", " ") ;
							text = text.replaceAll("。", "") ;
						}

						text = text.replaceAll("\r\n", "\n") ;
						text = text.replaceAll(/(\n)+/g, "\n") ;
						text = text.trim() ;

						let element = (Number(num)) + "\n" + secToTime(startTime, ",") + " --> " + secToTime(endTime, ",") + "\n" + text + "\n\n" ;

						num++ ;
						srtData += element ;
					}

					let fileName = $("#appDataFileName").val() ;

					fileName = fileName.replaceAll(".captionEditor", "") ;
					fileName = fileName.replaceAll(".jimakuEditor", "") ;

					if (appDataProperties["language"] == "ja") {
						fileName += ".ja_JP.srt" ;
					} else {
						fileName += "." + appDataProperties["language"] + ".srt" ;
					}

					saveAsFile(srtData, fileName) ;
				}) ;

				$("#ffButton").on("click", (e) => {
					playingFastForword(Number($("#seekingSeconds").val())) ;
				}) ;

				$("#playButton").on("click", (e) => {
					playVideo() ;
				}) ;

				$("#pauseButton").on("click", (e) => {
					pauseVideo() ;
				}) ;

				$("#rwButton").on("click", (e) => {
					playingRewind(Number($("#seekingSeconds").val())) ;
				}) ;

				$("#slowSpeedButton").on("click", (e) => {
					setPlaybackRate(0.7) ;
				}) ;

				$("#normalSpeedButton").on("click", (e) => {
					setPlaybackRate(1.0) ;
				}) ;

				$("#fastSpeedButton").on("click", (e) => {
					setPlaybackRate(1.5) ;
				}) ;

				$("#fastestSpeedButton").on("click", (e) => {
					setPlaybackRate(2.0) ;
				}) ;

				$("#saveAcpWordDataButton").on("click", saveAcpWordDataButton) ;

				function saveAcpWordDataButton(e) {
					let fileName = $("#acpWordDataFileName").val() ;
					
					if (fileName == undefined || fileName == null || fileName == "") {
						alert("ファイル名を入力してください。") ;
						return ;
					}

					let acpProfileWords = $("#acpProfileWords").val() ;

					saveAsFile(acpProfileWords , fileName) ;
				} ;
				
				$("#loadAcpWordDataButton").on("click", (e) => {
					if (window.confirm("現在の単語データを置き換えます。もし直接編集をしている場合は保存するのをお勧めします。続けますか？")) {
						$("#acpWordDataFile").click() ;
					}
				}) ;

				$("#acpWordDataFile").on('change', (e) => {
					let fileList = $('#acpWordDataFile').get(0).files;
					let result = fileList[0];
					let reader = new FileReader() ;

					reader.readAsText(result) ;

					reader.addEventListener('load', function() {
						let content = reader.result ;
						
						$("#acpProfileWords").val(content) ; 
						$("#acpWordDataFileName").val(e.target.files[0].name) ;
						$("#acpWordDataFile").val("") ;

						storeSettings() ;
					}) ;
				}) ;

				// AppData save&load
				function saveAppDataFunction(e) {
					saveAppData(lines, details, appDataProperties) ;
				}

				$("#saveAppDataButton").on("click", saveAppDataFunction) ;
				$("#quickSaveAppDataButton").on("click", saveAppDataFunction) ;

				$("#loadAppDataButton").on("click", (e) => {
					if (lines.length != 0) {
						if (window.confirm("現在作業中のデータがあります。よろしいですか？")) {
							$("#appDataFile").click() ;
						}
					} else {
						$("#appDataFile").click() ;
					}
				}) ;

				$("#appDataFile").on('change', (e) => {
					let fileList = $('#appDataFile').get(0).files;
					let result = fileList[0];
					let reader = new FileReader() ;

					reader.readAsText(result) ;

					reader.addEventListener('load', function() {
						let content = reader.result ;
						let appData = JSON.parse(content) ;

						let videoURL = "" ;
						
						if (appData["videoURL"] != undefined) {
							videoURL = appData["videoURL"] ;
						}

						lines = appData["lines"] ;
						details= appData["details"] ;

						if (details == undefined) {
							details = [] ;

							for (let key in lines) {
								details.push({}) ;
							}
						}

						let offsetTimeLength = appData["offsetTimeLength"] ;
						let shortcutWords = appData["shortcutWords"] ;
						let appDataFileName = appData["appDataFileName"] ;

						appDataProperties = appData["properties"] == undefined ? {} : appData["properties"] ;

						if (appDataProperties["language"] == undefined) {
							appDataProperties["language"] = "ja" ;
						}

						$("#fromLanguageSelect").val(appDataProperties["language"]) ;

						$("#offsetTimeLength").val(offsetTimeLength) ;
						$("#videoURL").val(videoURL) ;
						$("#appDataFileName").val(appDataFileName) ;

						if (shortcutWords != undefined) {
							$("#shortcutWord1").val(shortcutWords["shortcutWord1"]) ;
							$("#shortcutWord2").val(shortcutWords["shortcutWord2"]) ;
							$("#shortcutWord3").val(shortcutWords["shortcutWord3"]) ;
							$("#shortcutWord4").val(shortcutWords["shortcutWord4"]) ;
							$("#shortcutWord5").val(shortcutWords["shortcutWord5"]) ;
							$("#shortcutWord6").val(shortcutWords["shortcutWord6"]) ;
						}

						let mediaType = "<%= mediaType %>" ;

						if (mediaType == "youtube") {
							if (videoURL != "") {
								loadOnlineVideo(videoURL) ;
							}
						}

						$("#appDataFile").val("") ;

						prevStartTimeAdjustingIndex = -1 ;
						prevEndTimeAdjustingIndex = -1 ;
						
						updateSubtitleData() ;
					}) ;
				}) ;

				setupShortcuts() ;
			}) ;

			function commitAppData() {
				for (let i=0; i<lines.length; i++) {
					commitData(i) ;
				}
			}

			function commitData(index) {
				let textClassName = "#text" + Number(index) ;
				let alreadyEditedCheckBoxClassName = "#alreadyEditedCheckBox" + Number(index) ;

				lines[index][2] = $(textClassName).val();
				details[index]["edited"] = $(alreadyEditedCheckBoxClassName).prop("checked") ;
			}

			async function updatePublicDictionaryComboBox() {
				$("#publicDictionariesSelect1").empty() ;
				$("#publicDictionariesSelect2").empty() ;
				
				let accessToken = $('#accessToken').val() ;

				if (accessToken != null && accessToken != undefined && accessToken != "") {
					let result = await getPublicDictionaries($('#accessToken').val()) ;

					for (let key in result.dictionaries) {
						let dictionary = result.dictionaries[key] ;

						$("#publicDictionariesSelect1").append($("<option></option>").attr("value", dictionary.account).text(dictionary.display_name));
						$("#publicDictionariesSelect2").append($("<option></option>").attr("value", dictionary.account).text(dictionary.display_name));
					}

					let publicDictionary1 = localStorage.getItem("publicDictionary1") ;
					let publicDictionary2 = localStorage.getItem("publicDictionary2") ;

					if (publicDictionary1 != undefined) {
						$('#publicDictionariesSelect1').val(publicDictionary1) ;
					}

					if (publicDictionary2 != undefined) {
						$('#publicDictionariesSelect2').val(publicDictionary2) ;
					}

					let publicDictionaryLabel1 = $("#publicDictionariesSelect1 option:selected").text() ;
					$('#publicDictionaryLabel1').text(publicDictionaryLabel1) ;

					let publicDictionaryLabel2 = $("#publicDictionariesSelect2 option:selected").text() ;
					$('#publicDictionaryLabel2').text(publicDictionaryLabel2) ;
				}
			}

			// Update Subtitls
			function updateSubtitleData() {
				let offsetTime = Number($("#offsetTimeLength").val()) ;
				let converted = appDataProperties["converted"] ;
				let translated = appDataProperties["translated"] ;

				$("#subtitles").empty() ;

				for (let i=0; i<lines.length; i++) {
					let line = lines[i] ;
					let detail = details[i] ;

					let startTime = line[0] ;

					if (startTime + offsetTime < 0) {
						continue ;
					}

					$("#subtitles").append(subtitleBlock(i, line, detail, offsetTime, converted, translated)) ;

					let textClassName = "#text" + Number(i) ;
					let nextTextClassName = "#text" + (Number(i) + 1) ;
					let alreadyEditedCheckBoxClassName = "#alreadyEditedCheckBox" + Number(i) ;

					//$(textClassName).height(30);
					$(textClassName).css("lineHeight","20px");
					$(textClassName).on("keydown", function(e) {
						if (e.keyCode == 13) {
							if (e.originalEvent.metaKey == false && e.originalEvent.ctrlKey == false) {
								let autoPlayWhenEdtingFinished = $("#autoPlayWhenEdtingFinished").prop("checked") ;

								if (!isPlayingVideo() && autoPlayWhenEdtingFinished) {
									
									playingRewind(Number($("#playbackSeconds").val())) ;
									playVideo() ;

									// Update!
									line[2] = $(textClassName).val() ;
								} else {
									$(alreadyEditedCheckBoxClassName).prop("checked", true) ;
									$(nextTextClassName).focus() ;
								}
							} else {
								insertText(textClassName, "\n") ;

								// Update!
								line[2] = $(textClassName).val() ;
							}

							return false ;
						} else {
							let shortcutClassName = "" ;

							if (e.originalEvent.code == "F1") {
								shortcutClassName = "#shortcutWord1" ;
							} else if (e.originalEvent.code == "F2") {
								shortcutClassName = "#shortcutWord2" ;
							} else if (e.originalEvent.code == "F3") {
								shortcutClassName = "#shortcutWord3" ;
							} else if (e.originalEvent.code == "F4") {
								shortcutClassName = "#shortcutWord4" ;
							} else if (e.originalEvent.code == "F5") {
								shortcutClassName = "#shortcutWord5" ;
							} else if (e.originalEvent.code == "F6") {
								shortcutClassName = "#shortcutWord6" ;
							}
							
							if (shortcutClassName != "") {
								
								let shortcutWord = $(shortcutClassName).val() ;

								insertText(textClassName, shortcutWord) ;

								// Update!
								line[2] = $(textClassName).val() ;
							}
						}

						return true ;
					}) ;

					$(textClassName).on("input", function(e) {
						let autoStopWhenEdtingStarted = $("#autoStopWhenEdtingStarted").prop("checked") ;
						let nonStopWhenDotsInput = $("#nonStopWhenDotsInput").prop("checked") ;

						if (autoStopWhenEdtingStarted) {
							if (e.originalEvent.data != null) {
								if (nonStopWhenDotsInput) {
									if (e.originalEvent.data != "。" && e.originalEvent.data != "、") {					
										pauseVideo() ;
									}
								} else {
									pauseVideo() ;
								}
							}
						}

						$(alreadyEditedCheckBoxClassName).prop("checked", true) ;
					}) ;

					$(textClassName).on("focusout", function(e) {
						// Update!
						line[2] = $(textClassName).val() ;
					}) ;

					function adjustTextareaHeight() {
						const textarea = $(textClassName);
						const tempDiv = $('<div>').css({
							'position': 'absolute',
							'top': '-9999px',
							'width': textarea.width(),
							'fontSize': textarea.css('fontSize'),
							'fontFamily': textarea.css('fontFamily'),
							'lineHeight': textarea.css('lineHeight'),
							'padding': textarea.css('padding'),
							'border': textarea.css('border'),
							'boxSizing': textarea.css('boxSizing'),
							'whiteSpace': 'pre-wrap',
							'wordWrap': 'break-word'
						}).text(textarea.val() + '\n');
						
						$('body').append(tempDiv);
						textarea.height(tempDiv.height() + 20);
						tempDiv.remove();
					}

					$(textClassName).on('input', adjustTextareaHeight);

					adjustTextareaHeight() ;
				}
			}

			let prevStartTimeAdjustingIndex = -1 ;
			let prevEndTimeAdjustingIndex = -1 ;

			function startTimeAdjusting(index, duration) {
				let line = lines[index] ;
				let offsetTime = Number($("#offsetTimeLength").val()) ;

				if (index != 0) {
					let prevLine = lines[index-1] ;

					if (line[1] < line[0] + duration) {
						line[0] = line[1] ;
					} else if (prevLine[1] == line[0] || prevLine[1] > line[0] + duration) {
						if (prevLine[0] < line[0] + duration) {
							line[0] += duration ;
							prevLine[1] = line[0] ;
						} else {
							line[0] = prevLine[0] ;
							prevLine[1] = prevLine[0] ;
						}

						$("#endTimeLabel" + (index-1)).text(secToTime(prevLine[1] + offsetTime, ".")) ;
					} else {
						line[0] += duration ;
					}
				} else {
					if (line[1] < line[0] + duration) {
						line[0] = line[1] ;
					} else {
						line[0] += duration ;
					}

					if (line[0] < 0) {
						line[0] = 0
					}
				}

				$("#startTimeLabel" + index).text(secToTime(line[0] + offsetTime, ".")) ;

				if (duration == 0 && prevStartTimeAdjustingIndex == index) {
					if (isPlayingVideo()) {
						pauseVideo() ;
					} else {
						seekToVideo(line[0] + offsetTime, true) ;
					} 
				} else {
					seekToVideo(line[0] + offsetTime, true) ;
				}

				prevStartTimeAdjustingIndex = index ;
				prevEndTimeAdjustingIndex = -1 ;
			}

			function endTimeAdjusting(index, duration) {
				let line = lines[index] ;
				let offsetTime = Number($("#offsetTimeLength").val()) ;

				if (lines.length - 1 > index) {
					let nextLine = lines[index+1] ;

					if (line[0] > line[1] + duration) {
						line[1] = line[0] ;
					} else if (nextLine[0] < line[1] + duration) {
						line[1] = nextLine[0] ;
					} else {
						line[1] += duration ;
					}
				} else {
					if (line[0] > line[1] + duration) {
						line[1] = line[0] ;
					} else {
						line[1] += duration ;
					}
				}

				$("#endTimeLabel" + index).text(secToTime(line[1] + offsetTime, ".")) ;

				if (duration == 0 && prevEndTimeAdjustingIndex == index) {
					if (isPlayingVideo()) {
						pauseVideo() ;
					} else {
						seekToVideo(line[1] + offsetTime - 1.0, true) ;
					} 
				} else {
					seekToVideo(line[1] + offsetTime - 1.0, true) ;
				}

				prevStartTimeAdjustingIndex = -1 ;
				prevEndTimeAdjustingIndex = index ;
			}

			function appendDataButton(index) {
				if (index == 0) {
					alert("先頭の発話でこの操作は実行できません。") ;
					return ;
				}

				commitData(index) ;

				if (!window.confirm("一つ前の発話と結合します。この操作は元に戻せません、よろしいですか？")) {
					return ;
				}

				let line1 = lines[index-1] ;
				let line2 = lines[index] ;

				line1[1] = line2[1] ;

				let insertChars = "" ;

				if (appDataProperties["language"] != "ja") {
					insertChars = " " ;
				}

				for (let key = 2; key < line1.length; key++) {
					if (line1[key] != line2[key]) {
						line1[key] = line1[key] + insertChars + line2[key] ;
					}
				}
				
				lines.splice(index, 1) ;
				details.splice(index, 1) ;

				let scrollTop = $("#scroller")[0].scrollTop ;

				updateSubtitleData() ;

				$("#scroller")[0].scrollTop = scrollTop ;
			}

			function divideDataButton(index) {
				commitData(index) ;

				let line = lines[index] ;

				let textClassName = "#text" + Number(index) ;
				let textarea = $(textClassName)[0] ;

				let text = line[2] ;
				let selectionStart = textarea.selectionStart;

				if (selectionStart <= 0 || selectionStart >= text.length) {
					alert("発話を分割可能なカーソル位置を設定していください。") ;
					return ;
				}

				if (!window.confirm("現在のカーソル位置で発話を分割します。この操作は元に戻せません、よろしいですか？")) {
					return ;
				}

				let duration = line[1] - line[0] ;
				let timeOfChar = duration / text.length ;

				let duration1 = timeOfChar * selectionStart ;
				let duration2 = timeOfChar * (text.length - selectionStart) ;

				line[1] = line[0] + duration1 ;
				line[2] = text.substr(0, selectionStart) ;

				let newLine = Array.from(line)

				newLine[0] = line[1] ;
				newLine[1] = newLine[0] + duration2 ;
				newLine[2] = text.substr(selectionStart, text.length - selectionStart) ;

				lines.splice(index + 1, 0, newLine) ;
				details.splice(index + 1, 0, {}) ;

				let scrollTop = $("#scroller")[0].scrollTop ;

				updateSubtitleData() ;

				$("#scroller")[0].scrollTop = scrollTop ;
			}

			function subtitleBlock(index, subtitleData, detailData, offsetTime, converted , translated) {
				let startTime = subtitleData[0] + offsetTime ;
				let endTime = subtitleData[1] + offsetTime ;
				let checked = detailData["edited"] ? "checked" : "" ;

				startTime = secToTime(startTime, ".") ;
				endTime = secToTime(endTime, ".") ;

				let controllerButtons = `<div class="col-auto d-flex align-items-center p-0"><button class="btn btn-success btn-sm px-1 py-0" onclick="startTimeAdjusting(${index}, 0)"><%- __('再生') %></button></div>` ;
				let timeAdjustingButtons = `<div class="col-auto d-flex align-items-center time small">${startTime} - ${endTime}</div>` ;
		
				if (converted) {
					controllerButtons = "" ;

					let buttonClass = "btn btn-sm btn-outline-secondary px-1 py-0 time small" ;

					timeAdjustingButtons = `<div class="col-auto time">
												<div class="row">
													<div id="startTimeLabel${index}" class="col fs-6">${startTime}</div>
												</div>
												<div class="row">
													<div class="col">
														<div class="btn-group" role="group" aria-label="Start Time Adjusting">
															<button class="${buttonClass}" onclick="startTimeAdjusting(${index}, -0.5)">-.5</button>
															<button class="${buttonClass}" onclick="startTimeAdjusting(${index}, -0.1)">-.1</button>
															<button class="btn btn-sm btn-success px-1 py-0 time small" onclick="startTimeAdjusting(${index}, 0)">再生</button>
															<button class="${buttonClass}" onclick="startTimeAdjusting(${index}, 0.1)">+.1</button>
															<button class="${buttonClass}" onclick="startTimeAdjusting(${index}, 0.5)">+.5</button>
														</div>
													</div>
												</div>
											</div>
											<div class="col-auto time">
												<div class="row">
													<div id="endTimeLabel${index}" class="col fs-6">${endTime}</div>
												</div>
												<div class="row">
													<div class="col">
														<div class="btn-group" role="group" aria-label="End Time Adjusting">
															<button class="${buttonClass}" onclick="endTimeAdjusting(${index}, -0.5)">-.5</button>
															<button class="${buttonClass}" onclick="endTimeAdjusting(${index}, -0.1)">-.1</button>
															<button class="btn btn-sm btn-success px-1 py-0 time small" onclick="endTimeAdjusting(${index}, 0)">再生</button>
															<button class="${buttonClass}" onclick="endTimeAdjusting(${index}, 0.1)">+.1</button>
															<button class="${buttonClass}" onclick="endTimeAdjusting(${index}, 0.5)">+.5</button>
														</div>
													</div>
												</div>
											</div>` ;
				}

				let originalText = "" ;

				if (translated && subtitleData[3] != undefined && subtitleData[3] != ""  && subtitleData[3] != null) {
					originalText = '<div class="row p-0 mx-3 mb-3 small">' + subtitleData[3] + '</div>' ;
				}

				return `<tr>
							<td>
								<div class="row" id="subtitle${index}">
									<div class="col-auto d-flex align-items-center time">${Number(index) + 1}</div>
									${controllerButtons}
									${timeAdjustingButtons}
									<div class="col-auto d-flex justify-content-end">
										<div class="form-check">
											<label class="form-check-label small" for="alreadyEditedCheckBox"><%- __('編集済み') %></label>
											<input class="form-check-input" type="checkbox" value="" id="alreadyEditedCheckBox${index}" name="alreadyEditedCheckBox${index}" value="" ${checked}>
										</div>
									</div>
								</div>
								
								${originalText}
								
								<div class="row py-0 mb-1">
									<textarea id="text${index}">${subtitleData[2]}</textarea>
								</div>
								<div class="row py-0 mb-2">			
									<div class="col-auto p-0"><button class="btn btn-outline-secondary btn-sm py-0" onclick="appendDataButton(${index})"><%- __('前の発話と結合する') %></button></div>
									<div class="col-auto px-1 py-0"><button class="btn btn-outline-secondary btn-sm py-0" onclick="divideDataButton(${index})"><%- __('カーソル位置で分割') %></button></div>
								</div>
							</td>
						</tr>` ;
			}

			// Shortcut
			function setupShortcuts() {	
				
				let funcMetaDown = function() {
					playingToggle() ;
				} ;

				shortcut.add("Meta+Down", funcMetaDown);
				shortcut.add("Ctrl+Down", funcMetaDown);

				let funcMetaLeft = function() {
					playingRewind(Number($("#seekingSeconds").val())) ;
				} ;

				shortcut.add("Meta+Left", funcMetaLeft);
				shortcut.add("Ctrl+Left", funcMetaLeft);

				let funcMetaRight = function() {
					playingFastForword(Number($("#seekingSeconds").val())) ;
				} ;

				shortcut.add("Meta+Right", funcMetaRight);	
				shortcut.add("Ctrl+Right", funcMetaRight);	

				let funcMetaUp = function() {
					jumpToSubtitle() ;
				} ;

				shortcut.add("Meta+Up", funcMetaUp) ;
				shortcut.add("Ctrl+Up", funcMetaUp);	
			}

			function restoreSettings() {
				let autoStopWhenEdtingStarted = localStorage.getItem("autoStopWhenEdtingStarted") ;

				if (autoStopWhenEdtingStarted != undefined) {
					$('#autoStopWhenEdtingStarted').prop("checked", autoStopWhenEdtingStarted == "true") ;
				}

				let nonStopWhenDotsInput = localStorage.getItem("nonStopWhenDotsInput") ;

				if (nonStopWhenDotsInput != undefined) {
					$('#nonStopWhenDotsInput').prop("checked", nonStopWhenDotsInput == "true") ;
				}

				let autoPlayWhenEdtingFinished = localStorage.getItem("autoPlayWhenEdtingFinished") ;

				if (autoPlayWhenEdtingFinished != undefined) {
					$('#autoPlayWhenEdtingFinished').prop("checked", autoPlayWhenEdtingFinished == "true") ;
				}

				let seekingSeconds = localStorage.getItem("seekingSeconds") ;

				if (seekingSeconds != undefined) {
					$('#seekingSeconds').val(seekingSeconds) ;
				}

				let playbackSeconds = localStorage.getItem("playbackSeconds") ;

				if (playbackSeconds != undefined) {
					$('#playbackSeconds').val(playbackSeconds) ;
				}

				let replacingDots = localStorage.getItem("replacingDots") ;

				if (replacingDots != undefined) {
					$('#replacingDots').prop("checked", replacingDots == "true") ;
				}

				let showPreviewAlways = localStorage.getItem("showPreviewAlways") ;

				if (showPreviewAlways != undefined) {
					$('#showPreviewAlways').prop("checked", showPreviewAlways == "true") ;
				}

				let mediaType = "<%= mediaType %>" ;

				// File only
				if (mediaType == "file") {
					let saveAppKey = localStorage.getItem("saveAppKey") ;

					if (saveAppKey != undefined) {
						$('#saveAppKey').prop("checked", saveAppKey == "true") ;
					}

					let acpGrammarFileNames = localStorage.getItem("acpGrammarFileNames") ;

					if (acpGrammarFileNames != undefined) {
						$('#acpGrammarFileNameSelect').val(acpGrammarFileNames) ;
					}
					
					let accessToken = localStorage.getItem("accessToken") ;

					if (accessToken != undefined) {
						$('#accessToken').val(accessToken) ;
					}

					let acpProfileWords = localStorage.getItem("acpProfileWords") ;

					if (acpProfileWords != undefined) {
						$('#acpProfileWords').val(acpProfileWords) ;
					}

					let acpWordDataFileName = localStorage.getItem("acpWordDataFileName") ;

					if (acpWordDataFileName != undefined && acpWordDataFileName != "") {
						$('#acpWordDataFileName').val(acpWordDataFileName) ;
					} else {
						$('#acpWordDataFileName').val("単語登録.txt") ;
					}

					let acpAppKey = localStorage.getItem("acpAppKey") ;

					if (acpAppKey != undefined) {
						$('#acpAppKey').val(acpAppKey) ;
					}

					let acpLoggingOptOut = localStorage.getItem("acpLoggingOptOut") ;

					if (acpLoggingOptOut != undefined) {
						$('[name=acpLoggingOptOut]').val(acpLoggingOptOut) ;
					}

					let ignoreReplyToken = localStorage.getItem("ignoreReplyToken") ;

					if (ignoreReplyToken != undefined) {
						$('#ignoreReplyToken').prop("checked", ignoreReplyToken == "true") ;
					}

					let acpDiarization = localStorage.getItem("acpDiarization") ;

					if (acpDiarization != undefined) {
						$('#acpDiarization').prop("checked", acpDiarization == "true") ;
					}

					let acpDiarizationCount = localStorage.getItem("acpDiarizationCount") ;

					if (acpDiarizationCount != undefined) {
						$('#acpDiarizationCount').val(acpDiarizationCount) ;
					}
				}
			}

			function storeSettings() {

				localStorageSetItem("autoStopWhenEdtingStarted", $('#autoStopWhenEdtingStarted').prop("checked")) ;
				localStorageSetItem("nonStopWhenDotsInput", $('#nonStopWhenDotsInput').prop("checked")) ;
				localStorageSetItem("autoPlayWhenEdtingFinished", $('#autoPlayWhenEdtingFinished').prop("checked")) ;
				localStorageSetItem("replacingDots", $('#replacingDots').prop("checked")) ;
				localStorageSetItem("showPreviewAlways", $('#showPreviewAlways').prop("checked")) ;
				localStorageSetItem("seekingSeconds", $('#seekingSeconds').val()) ;
				localStorageSetItem("playbackSeconds", $('#playbackSeconds').val()) ;

				let mediaType = "<%= mediaType %>" ;

				// File only
				if (mediaType == "file") {
					localStorageSetItem("saveAppKey", $('#saveAppKey').prop("checked")) ;
					localStorageSetItem("acpLoggingOptOut", $('[name=acpLoggingOptOut]').val()) ;
					localStorageSetItem("acpGrammarFileNames", $('#acpGrammarFileNameSelect').val()) ;
					localStorageSetItem("publicDictionary1", $('#publicDictionariesSelect1').val()) ;
					localStorageSetItem("publicDictionary2", $('#publicDictionariesSelect2').val()) ;
					localStorageSetItem("accessToken", $('#accessToken').val()) ;
					localStorageSetItem("acpProfileWords", $('#acpProfileWords').val()) ;
					localStorageSetItem("acpWordDataFileName", $('#acpWordDataFileName').val()) ;
					
					if ($('#saveAppKey').prop("checked")) {
						localStorageSetItem("acpAppKey", $('#acpAppKey').val()) ;
					} else {
						localStorage.removeItem("acpAppKey") ;
					}

					localStorageSetItem("ignoreReplyToken", $('#ignoreReplyToken').prop("checked")) ;
					localStorageSetItem("acpDiarization", $('#acpDiarization').prop("checked")) ;
					localStorageSetItem("acpDiarizationCount", $('#acpDiarizationCount').val()) ;
				}

				function localStorageSetItem(key, val) {
					if (val != undefined) {
						localStorage.setItem(key, val) ;
					}
				}
			}

			function insertText(textClassName, insertedText) {
				let text = $(textClassName).val() ;
				let selectionStart = $(textClassName)[0].selectionStart ;
				let selectionEnd = $(textClassName)[0].selectionEnd ;

				text = text.substr(0, selectionStart) + insertedText + text.substr(selectionEnd);

				$(textClassName).val(text) ;

				$(textClassName)[0].selectionStart = selectionStart + insertedText.length ;
				$(textClassName)[0].selectionEnd = selectionStart + insertedText.length ;
			}

			let subtitleIndex = 0 ;

			function getCurrentSubtitle(currentTime) {
				var subtitle = "" ;

				for (var i=subtitleIndex; i<lines.length; i++) {
					let offsetTime = Number($("#offsetTimeLength").val()) ;

					let line = lines[i] ;
					let startTime = Number(line[0]) + offsetTime ;
					let endTime = Number(line[1]) + offsetTime ;
					
					if (startTime < currentTime && currentTime < endTime) {
						subtitle = line[2] ;
						subtitleIndex = i ;

						/*
						let replacingDots = $('#replacingDots').prop("checked") ;

						if (replacingDots) {
							subtitle = subtitle.replaceAll("、", " ") ;
							subtitle = subtitle.replaceAll("、", " ") ;
							subtitle = subtitle.replaceAll("。", "") ;
						}

						subtitle = subtitle.replaceAll("\r\n", "\n") ;
						subtitle = subtitle.replaceAll(/(\n)+/g, "\n") ;
						subtitle = subtitle.trim() ;
						*/

						break ;
					}
				}

				return subtitle ;
			}

			function jumpToSubtitle() {
				let offsetTime = Number($("#offsetTimeLength").val()) ;
				let currentTime = playingGetCurrentTime() ;

				for (let key in lines) {
					let line = lines[key] ;
					let startTime = line[0] + offsetTime ;

					if (startTime > currentTime) {
						pauseVideo() ;
						$("#subtitle" + (key  - 1))[0].scrollIntoView(true) ;
						updatePlayingTime(currentTime) ;
						break ;
					}
				}
			}

			async function getPublicDictionaries(accessToken) {
				const headers = {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				};

				const param = {
					method: "POST",
					headers: headers,
					body: JSON.stringify({"token" : accessToken}),
				}

				return await fetch("/jimakueditor/get_public_dictionaries", param).then(response => response.json()) ;
			}

			function saveAppData(_lines, _details, _appDataProperties) {
				let fileName = $("#appDataFileName").val() ;
				
				if (fileName == undefined || fileName == null || fileName == "") {
					alert("ファイル名を入力してください。") ;
					return ;
				}

				let appData = {} ;

				commitAppData() ;
				
				if ($("#videoURL").val() != undefined) {
					appData["videoURL"] = $("#videoURL").val() ;
				}

				appData["lines"] = _lines ;
				appData["details"] = _details ;
				appData["offsetTimeLength"] = $("#offsetTimeLength").val() ;
				appData["appDataFileName"] = $("#appDataFileName").val() ;
				
				let shortcutWords = {} ;

				shortcutWords["shortcutWord1"] = $("#shortcutWord1").val() ;
				shortcutWords["shortcutWord2"] = $("#shortcutWord2").val() ;
				shortcutWords["shortcutWord3"] = $("#shortcutWord3").val() ;
				shortcutWords["shortcutWord4"] = $("#shortcutWord4").val() ;
				shortcutWords["shortcutWord5"] = $("#shortcutWord5").val() ;
				shortcutWords["shortcutWord6"] = $("#shortcutWord6").val() ;

				appData["shortcutWords"] = shortcutWords ;

				appData["properties"] = _appDataProperties ;

				saveAsFile(JSON.stringify(appData) , fileName) ;
			} ;

			let translationDialog ;

			async function onClickModalTranslationDialogButton() {
				if (lines.length == 0) {
					alert("データを読み込んでください。") ;
					return ;
				}

				if (appDataProperties["converted"] == true) {
					alert("すでにハコ割りされています。翻訳はハコ割り前のデータを使って行ってください。") ;
					return ;
				}

				if (appDataProperties["translated"] == true) {
					if (!window.confirm("すでに翻訳されています。内容が上書きされるので現在の作業中のデータを一度保存してからこの処理を行うことをお勧めします。続行しますか？")) {
						return ;
					}
				}
					
				let toLanguage = localStorage.getItem("toLanguage") ;

				if (toLanguage != undefined) {
					$('#toLanguageSelect').val(toLanguage) ;
				} else {
					$('#toLanguageSelect').val("en") ;
				}

				translationDialog = new bootstrap.Modal(document.getElementById('translationDialog'));
				translationDialog.show() ;
			}

			async function onClickMakeTranslationButton() {
				$("#makeTranslationButton").prop("disabled", true);
				$("#makeTranslationCancelButton").prop("disabled", true);
				
				let spinner = '<div class="d-flex justify-content-center"><div class="spinner-border text-secondary my-3" role="status"><span class="visually-hidden">Loading...</span></div></div>' ;
				
				$("#makingTranslationSpinner").empty() ;
				$("#makingTranslationSpinner").append(spinner) ;

				let fromLanguage = $("#fromLanguageSelect").val() ;
				let toLanguage = $("#toLanguageSelect").val() ;

				localStorage.setItem("toLanguage", toLanguage) ;

				if (appDataProperties["translated"] == true) {
					for (let key in lines) {
						let line = lines[key] ;

						line[2] = line[3] ;
						line[3] = "" ;
						line[5] = line[2] ;
					}

					fromLanguage = appDataProperties["originalLanguage"] ;
				}

				if (fromLanguage == toLanguage) {
					alert("同じ言語への翻訳はできません。") ;
				} else {
					lines = await getTranslation(fromLanguage, toLanguage) ;

					appDataProperties["translated"] = true ;
					appDataProperties["language"] = toLanguage ;
					appDataProperties["originalLanguage"] = fromLanguage ;

					$("#fromLanguageSelect").val(appDataProperties["language"]) ;

					updateSubtitleData() ;
				}

				$("#makeTranslationButton").prop("disabled", false);
				$("#makeTranslationCancelButton").prop("disabled", false);
				
				$("#makingTranslationSpinner").empty() ;

				translationDialog.hide();
			}

			function onClickSaveOriginalDataButton() {
				if (appDataProperties["translated"] != true) {
					alert("この操作は翻訳後に行うことができます。") ;
					return ;
				}

				let newAppDataProperties = {} ;

				for (let key in appDataProperties) {
					newAppDataProperties[key] = appDataProperties[key] ;
				}

				newAppDataProperties["language"] = newAppDataProperties["originalLanguage"] ;
				
				delete newAppDataProperties["translated"] ;
				delete newAppDataProperties["originalLanguage"] ;

				let newLines = [] ;

				for (let key in lines) {
					let line = lines[key] ;

					let newLine = Array.from(line) ;

					newLine[2] = newLine[3] ;
					newLine[3] = "" ;
					newLine[5] = newLine[2] ;

					newLines.push(newLine) ;
				}

				saveAppData(newLines, details, newAppDataProperties) ;
			}

			async function getTranslationLanguages(locale) {
				const headers = {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				};

				const param = {
					method: "POST",
					headers: headers,
					body: JSON.stringify({"target" : locale}),
				}

				return await fetch("/jimakueditor/get_translation_languages", param).then(response => response.json()) ;
			}

			async function getTranslation(from, to) {
				const headers = {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				};

				const param = {
					method: "POST",
					headers: headers,
					body: JSON.stringify({
						"from" : from,
						"to" : to,
						"lines" : lines}),
				}

				return await fetch("/jimakueditor/get_translation", param).then(response => response.json()) ;
			}

			// unused
			function onClickSeparateByDotButton() {
				if (lines.length == 0) {
					alert("データを読み込んでください。") ;
					return ;
				}

				if (appDataProperties["converted"] == true) {
					alert("すでにハコ割りされています。この操作はハコ割り前のデータを使って行ってください。") ;
					return ;
				}

				if (appDataProperties["translated"] == true) {
					alert("すでに翻訳されています。この操作は翻訳前のデータに対して行うことができます。") ;
					return ;
				}

				if (appDataProperties["language"] != "ja") {
					alert("この操作は日本語の編集データに対してのみ行うことができます。") ;
					return ;
				}

				let newLines = [] ;
				let newDetails = [] ;

				for (let key in lines) {
					let line = lines[key] ;
					let detail = details[key] ;

					let duration = line[1] - line[0] ;
					let text = line[2] ;

					if (text == "") {
						continue ;
					}

					let timePerChar = duration / text.length ;

					let blocks = text.split("。") ;

					if (blocks.length > 1) {
						let startTime = line[0] ;

						for (let blockkey in blocks) {
							let block = blocks[blockkey] ;

							if (block == "") {
								continue ;
							}

							let endTime = startTime + block.length * timePerChar ;

							let newLine = Array.from(line) ;

							newLine[0] = startTime ;
							newLine[1] = endTime ;
							newLine[2] = block + "。" ;

							newLines.push(newLine) ;
							newDetails.push(detail) ;

							startTime = endTime ;
						}
					} else {
						newLines.push(line) ;
						newDetails.push(detail) ;
					}
				}

				lines = newLines ;
				details = newDetails ;

				updateSubtitleData() ;
			}

		</script>
	</body>
</html>
