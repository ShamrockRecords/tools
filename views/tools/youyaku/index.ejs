<!DOCTYPE html>
<html lang="ja">
	<head>
		<%- include('../../parts/head', {title: '字幕データから要約する'}) %>
		<meta property="og:site_name" content="字幕データから要約する - UDトークツールズ"/>
		<meta property="og:url" content="<%= rootURL %>"/>
		<meta property="og:title" content="字幕データから要約する - UDトークツールズ"/>
		<meta property="og:type" content="Website" />
		<meta property="og:description" content=""/>

		<script type="text/javascript" src="/javascripts/functions.js"></script>

		<style>
			body
			{
				height: 100%;
				background-color:ghostwhite;
			}

			h1 {
			position: relative;
			line-height: 1.4;
			padding:0.25em 1em;
			display: inline-block;
			top:0;
			}

			h1:before, h1:after { 
			position: absolute;
			top: 0;
			content:'';
			width: 8px;
			height: 100%;
			display: inline-block;
			}

			h1:before {
			border-left: solid 1px black;
			border-top: solid 1px black;
			border-bottom: solid 1px black;
			left: 0;
			}

			h1:after {
			content: '';
			border-top: solid 1px black;
			border-right: solid 1px black;
			border-bottom: solid 1px black;
			right: 0;
			}

			h2 {
			padding: 0.4em 0.5em;/*文字の上下 左右の余白*/
			color: #494949;/*文字色*/
			background: #f4f4f4;/*背景色*/
			border-left: solid 5px #7db4e6;/*左線*/
			border-bottom: solid 3px #d7d7d7;/*下線*/
			}
		</style>
	</head>
	<body class="p-3">
		<div class="container">
			<div class="mb-3">
				<a href="/">トップに戻る</a>
			</div>
			<h1 class="mb-3">字幕データから要約する
			</h1>
					
			<div class="mb-3 small">
				字幕データを読み込ませてChatGPTのAPIを使用して要約を作成するアプリです。<br /><br />
				※しばらくの間はベータ版としての提供をします。ChatGPTのAPI利用にはお金がかかるのでしばらく様子を見てこちらで負担ができそうな金額であれば継続し、コストがかさむようならAPIキーを各自で取得していただき入力して使う方式に変更をします。
			</div>

			<div class="mb-3">
				
				<div class="mb-5">
					<div class="mb-3">
						<h2>データを読み込み</h2>
					</div>

					<div class="ms-3">
						<div class="mb-3">
							<label for="srtFile" class="form-label">UDトークの会話ログ（.csv）または字幕ファイル（.srt）を読み込み</label>
							<input class="form-control" id="srtFile" type="file" accept=".srt,.csv"/>
						</div>

						<div class="ms-3">
							<div class="mb-3 small" id="lineCount">
						</div>

						</div>
						
						<div class="mb-3">
							<label for="srtFile" class="form-label">処理内容</label>
							<input class="form-control mb-1" id="command" type="text" value="日本語で要約してください。"/>
							<select class="form-select" id="sampleCommands" aria-label="Default select example">
								<option selected>日本語で要約してください。</option>
								<option>内容を列挙してください。</option>
								<option>英語で要約してください。</option>
							</select>
						</div>

						<div class="mb-3">
							<div class="ms-3 small">
								ChatGPTに支持する内容を具体的に書きます。プルダウンで選択することもできます。
							</div>
						</div>

						<div class="mb-3">
							<label for="file_select" class="form-label">処理をするタイミング（文字数）</label>
							<div class="row">
								<div class="col-auto">
									<input class="form-control" id="distanceLength" type="number" name="distanceLength" value="800" style="text-align: right;" min="300" max="2000" />
								</div>
							</div>
						</div>

						<div class="mb-3">
							<div class="ms-3 small">
								300〜2000文字の間で設定してください。
							</div>
						</div>

						<div class="mb-3">
							<input class="btn btn-primary" id="summarizeButton" type="button" value="処理を実行する" name="summarizeButton" />
						</div>

						<div class="mb-3 small">
							字幕ファイル（.srt）を作成するには「<a href='/jimakueditor4file' target='_blank' rel='noopener'>字幕エディター for ファイル</a>」や「<a href='https://jimakudata.udtalk.jp' target='_blank' rel='noopener'>字幕データ変換くん</a>」をお使いください。<br>
							YouTubeの自動字幕を.srtでダウンロードしてきたものも読み込ませることができます。<br />
							誤認識を修正済みの字幕ファイルを入力した方が良い要約文が作成できるかもしれません。
						</div>
					</div>

					<div class="mb-3">
						<div id="spinner"></div>
					</div>
						
				<div class="mb-3">
					<h2>結果を表示</h2>
				</div>

				<div class="ms-3">
					<div class="mb-3">
						<label class="form-label" for="fileTitle">ファイル名（ファイル名に拡張子.srtで保存します。）</label>
					</div>
					
					<div class="mb-3">
						<div class="row g-2">
							<div class="col">
								<input class="form-control" id="fileTitle" type="text" name="fileTitle" value="" />
							</div>
							<div class="col-auto">
								<input class="btn btn-primary" id="saveAsFileButton" type="button" value="ファイルで保存" name="saveAsFileButton" />
							</div>
						</div>
					</div>
									
					<div class="mb-3">
						<textarea class="form-control" id="output" name="output" style="height:500px" readonly></textarea>
					</div>
				</div>
			</div>

			<div class="container">
				<div class="mb-3 small" style="text-align: center;">
					Copyright © <a href="https://udtalk.jp">UDトーク</a>. All Rights Reserved.
				</div>
			</div>
		</div>

		<script>
			$(function () {
				
			}) ;

			let lines = null ;
			
			$("#srtFile").on('click', () => {
				$("#srtFile").val("") ;
			}) ;

			$("#saveAsFileButton").on('click', () => {
				let fileName = $("#fileTitle").val() ;

				if (fileName == "" || fileName == undefined) {
					fileName = "要約.srt" ;
				}

				saveAsFile($("#output").text(), fileName) ;
			}) ;

			let data = null ;

			$("#srtFile").on('change', (e) => {
				$("#output").text("") ;
				
				let fileList = $('#srtFile').get(0).files;
				let result = fileList[0];

				let reader = new FileReader() ;
				
				reader.readAsText(result) ;

				reader.addEventListener('load', function() {
					let content = reader.result ;
					
					data = loadSrtFile(content) ;

					if (data.length == 0) {
						let lines = convertToArray(content) ;
						data = new Array() ;

						let isFirstLine = true ;
						let relativeStartTime = 0 ;

						for (let key in lines) {
							let line = lines[key] ;

							if (isFirstLine) {
								relativeStartTime = ParseToDate(line[0]) / 1000 ;
								isFirstLine = false ;
							}

							let block = {} ;

							let start = (ParseToDate(line[0]) / 1000) - relativeStartTime ;
							let end = (ParseToDate(line[1]) / 1000) - relativeStartTime ;

							block["time"] = {start: start, end: end} ;
							block["text"] = line[2] ;

							data.push(block) ;
						}
					}

					$("#lineCount").text(data.length.toString() + "行の字幕を読み込みました。") ;
				}) ;

				let fileName = "要約_" + result.name.split('.')[0] + ".srt" ;

				$("#fileTitle").val(fileName) ;
			})

			$("#sampleCommands").change(function() {
				var selectedOptionText = $(this).children(':selected').text();
 
 				$("#command").val(selectedOptionText);
			}) ;

			$("#distanceTime").on('change', (e) => {
				
			}) ;

			let isRunning = false ;

			$("#summarizeButton").on('click', async () => {
				if (data == null) {
					alert("字幕ファイル（.srt）を読み込んでください。") ;
					return ;
				}

				if (isRunning) {
					alert("現在処理中です。") ;
					return ;
				}

				isRunning = true ;
				await doAction(data) ;
				isRunning = false ;
			}) ;
			
			async function doAction(data) {
				$("#output").text("") ;

				let spinner = '<div class="d-flex justify-content-center"><div class="spinner-border my-3" role="status"><span class="visually-hidden">Loading...</span></div></div>' ;
				
				$("#spinner").empty() ;
				$("#spinner").append(spinner) ;

				let lines = new Array() ;
				let count = 1 ;
				let textCount = 0 ;
				let summary = "" ;
				let startTime = -1 ;
				let endTime = -1 ;
				let distanceLength = $("#distanceLength").val() ;
				let command = $("#command").val() ;

				if (distanceLength < 300) {
					distanceLength = 300 ;
				}

				if (distanceLength > 2000) {
					distanceLength = 2000 ;
				}

				for (let i=0; i<data.length; i++) {
					let element = data[i] ;
					let text = element.text.replaceAll('\r', '\n').replaceAll('\n', '').replaceAll(' ', '') ;

					if (startTime < 0) {
						startTime = element.time.start ;
					}

					endTime = element.time.end ;

					if (textCount > distanceLength) {
						summary += count.toString() + "\n";
						summary += secToTime(startTime, '.') + " --> " + secToTime(endTime, '.') + "\n";
						summary += await getSummary(lines, command) ;
						summary += "\n\n" ;
						startTime = -1 ;
						textCount = 0 ;
						count++ ;
						lines = new Array() ;
						$("#output").text(summary) ;
					}

					textCount += text.length ;
					lines.push(text) ;
				}

				if (lines.length != 0) {
					summary += count.toString() + "\n";
					summary += secToTime(startTime, '.') + " --> " + secToTime(endTime, '.') + "\n";
					summary += await getSummary(lines, command) ;
				}

				$("#output").text(summary) ;

				$("#spinner").empty() ;
			}

			async function getSummary(lines, command) {
				const headers = {
					'Accept': 'application/json',
					'Content-Type': 'application/json'
				};

				const param = {
					method: "POST",
					headers: headers,
					body: JSON.stringify({lines: lines, command: command}),
				}

				let summary = "" ;

				await fetch("/youyaku/data", param)
					.then(response => response.text())
					.then(data => {
						summary = data ;
					});

				return summary ;
			}
		</script>
	</body>
</html>